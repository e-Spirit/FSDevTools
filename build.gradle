/*
 *
 * *********************************************************************
 * fsdevtools
 * %%
 * Copyright (C) 2022 Crownpeak Technology GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * *********************************************************************
 *
 */

import com.espirit.moddev.build.BuildUtils
import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.util.regex.Pattern

/**
 * configure buildscript
 */

buildscript {
    ext {
        fsRuntimeVersion = '5.2.220907'
    }
}


/**
 * plugins
 */

plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'maven-publish'
    id "com.github.breadmoirai.github-release" version "2.2.12"
    id 'net.researchgate.release' version '2.8.1'
}

///////////////////////////////////////////////////////
// configure gradle wrapper
///////////////////////////////////////////////////////

wrapper {
    gradleVersion = '7.1.1'
    distributionType = Wrapper.DistributionType.ALL
}

///////////////////////////////////////////////////////
// configure application plugin
///////////////////////////////////////////////////////

application {
    applicationName('fs-devtools')
    mainClass.set('com.espirit.moddev.cli.Main')
}

/**
 * project configuration
 */

///////////////////////////////////////////////////////
// configure global variables
///////////////////////////////////////////////////////

/**
 * Uses {@code grgit} to get the name of the current branch
 * @return
 */
String getBranchName() {
    return grgit.branch.current().name
}

ext {
    // set version to {{issue.key}}-SNAPSHOT for feature branches
    try {
        def branchName = getBranchName().trim()
        def matcher = Pattern.compile('(?:.*/)?[^A-Z]*([A-Z]+-[0-9]+).*').matcher(branchName)
        if (matcher.matches()) {
            project.version = "${matcher.group(1)}-SNAPSHOT"
        }
    } catch (IOException e) {
        println "Failure determining branch name: $e"
    }

    // common properties
    gitHash = grgit.head().id

    // dependency versions
    airlineVersion = '2.8.5'
    apacheCommonsVersion = '3.12.0'
    assertJVersion = '3.22.0'
    classGraphVersion = '4.8.143'
    commonsCompressVersion = '1.21'
    hamcrestCoreVersion = '2.2'
    hamcrestJavaVersion = '2.0.0.0'
    guavaVersion = '31.1-jre'
    jacksonDatabindVersion = '2.13.2.2'
    junitVersion = '5.8.2'
    log4jVersion = '2.17.2'
    lombokVersion = '1.18.22'
    mockitoVersion = '4.4.0'
    slf4japiVersion = '1.7.36'

    // setup some variables
    firstSpiritVersion = fsRuntimeVersion
    javaVersion = JavaVersion.VERSION_11
    projectName = 'FirstSpirit CLI'
    projectVersion = project.version

    // setup repositories
    releaseRepository = 'core-platform-mvn-release'
    snapshotRepository = 'core-platform-mvn-snapshot'

    useArtifactory = project.hasProperty('artifactory_username') && project.hasProperty('artifactory_password')
}

///////////////////////////////////////////////////////
// additional scopes
///////////////////////////////////////////////////////

configurations {
    testRuntimeJar
}

/**
 * CONFIGURE PROJECTS
 */

///////////////////////////////////////////////////////
// dependencies for root project
///////////////////////////////////////////////////////

dependencies {
    implementation project(":fsdevtools-cli")

    // tests
    testRuntimeJar group: 'de.espirit.firstspirit', name: 'fs-isolated-runtime', version: "$firstSpiritVersion", ext: 'jar'
}

///////////////////////////////////////////////////////
// randomize port for integration tests
//
// NOTE: port should be in range 49152 <= port <= 65535
//
// see links for detailed description:
// - https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Dynamic,_private_or_ephemeral_ports
// - https://en.wikipedia.org/wiki/Ephemeral_port
//
///////////////////////////////////////////////////////

List<Integer> ports = BuildUtils.guessFreePorts()
ext.serverHttpPort = ports.get(0)
ext.serverSocketPort = ports.get(1)

///////////////////////////////////////////////////////
// configure all projects
///////////////////////////////////////////////////////

allprojects {
    repositories {
        if (rootProject.ext.useArtifactory) {
            maven {
                url = "https://artifactory.e-spirit.de/artifactory/repo"
                credentials {
                    username = artifactory_username
                    password = artifactory_password
                }
            }
        } else {
            mavenLocal()
            mavenCentral()
        }
    }

    apply plugin: 'maven-publish'

    group 'com.espirit.moddev.fsdevtools'
    version rootProject.version

    publishing {
        if (rootProject.ext.useArtifactory) {
            repositories {
                maven {
                    credentials {
                        username = artifactory_username
                        password = artifactory_password
                    }

                    url BuildUtils.getArtifactory(project.version, snapshotRepository, releaseRepository)
                }
            }
        }
    }
}

///////////////////////////////////////////////////////
// configure sub projects
///////////////////////////////////////////////////////

subprojects {
    apply plugin: 'java-library'

    // setup java
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    ///////////////////////////////////////////////////////
    // common dependencies for every sub project
    ///////////////////////////////////////////////////////

    dependencies {
        compileOnly group: 'de.espirit.firstspirit', name: 'fs-isolated-runtime', version: "${fsRuntimeVersion}"
        implementation "org.slf4j:slf4j-api:${slf4japiVersion}"

        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
        testImplementation "org.hamcrest:hamcrest-core:${hamcrestCoreVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        testImplementation "org.assertj:assertj-core:${assertJVersion}"
        testImplementation group: 'de.espirit.firstspirit', name: 'fs-isolated-runtime', version: "$firstSpiritVersion", ext: 'jar'
    }

    ///////////////////////////////////////////////////////
    // build source.jar
    ///////////////////////////////////////////////////////

    task sourcesJar(type: Jar) {
        classifier("sources")
        from sourceSets.main.allJava
    }

    ///////////////////////////////////////////////////////
    // build javadoc.jar
    ///////////////////////////////////////////////////////

    task javadocJar(type: Jar) {
        classifier("javadoc")
        from javadoc.destinationDir
    }

    ///////////////////////////////////////////////////////
    // publishing
    ///////////////////////////////////////////////////////

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }

    test {
        useJUnitPlatform()
    }
}

/**
 * DISTRIBUTION
 */

///////////////////////////////////////////////////////
// creates the fat jar (which is included in the distribution in "/lib/...")
///////////////////////////////////////////////////////

jar {
    manifest {
        attributes(
            'Manifest-Version': "1.0",
            'Main-Class': "com.espirit.moddev.cli.Main",
            'Multi-Release': "true",
        )
    }
}

shadowJar {
    archiveFileName.set("fsdevtools-cli-${project.version}.jar")
    destinationDirectory.set(file("$buildDir/shadowJAR"))
}

///////////////////////////////////////////////////////
// disable unneeded tasks
///////////////////////////////////////////////////////

shadowDistTar {
    enabled false
}

shadowDistZip {
    enabled false
}

distZip {
    enabled false
}

distTar {
    enabled false
}

///////////////////////////////////////////////////////
// assemble utility methods
///////////////////////////////////////////////////////

static List<File> getJsonSchemas(Project project) {
    def files = new ArrayList<File>()
    def dir = new File("${project.projectDir}/json-schema")
    if (dir.exists()) {
        files.add(dir)
    }
    project.subprojects { Project subProject ->
        def subFiles = getJsonSchemas(subProject)
        for (File file : subFiles) {
            if (!files.contains(file)) {
                files.add(file)
            }
        }
    }
    return files
}

task createDocumentationJson(type: JavaExec) {
    dependsOn(classes, "writeArtifactInfo")
    group = "documentation"
    description = "Run the main class with JavaExecTask"
    classpath = project(":fsdevtools-docs-generator").sourceSets.main.runtimeClasspath
    main = "com.espirit.moddev.cli.documentation.commands.CommandDocumentationGenerator"
    args "--file", "${project(":fsdevtools-docs").projectDir}/build/assets/data.json"
}

task writeArtifactInfo(type: DefaultTask) {
    group = "documentation"
    doLast() {
        String branchName = grgit.branch.current().name
        String commit = grgit.head().abbreviatedId
        String version = rootProject.version.toString()
        if (System.getProperty("isCI") == null) {
            version = "$version (DEV)"
        }
        mkdir("${project(":fsdevtools-docs").projectDir}/build/assets/")
        new File("${project(":fsdevtools-docs").projectDir}/build/assets/", "application.json").text = """
{
  "version": "$version",
  "branch": "$branchName",
  "commit": "$commit"
}
"""
    }
}

///////////////////////////////////////////////////////
// assembles the tar.gz file
///////////////////////////////////////////////////////

task assembleTarGz(type: Tar) {
    dependsOn(shadowJar, "fsdevtools-docs:buildVueApp")

    group('build')
    archiveBaseName = "fs-cli"
    archiveVersion = project.version
    archiveExtension = "tar.gz"
    compression = Compression.GZIP
    destinationDirectory.set(file("$buildDir/distributions"))

    // copy README.txt
    from("${project.projectDir}/archive/README.txt") {
        into("fs-cli")
        filter(ReplaceTokens, tokens: BuildUtils.mapToHashtable(project.properties))
    }
    // copy conf-dir with filtering
    from("${project.projectDir}/archive/conf") {
        into("fs-cli/conf")
        filter(ReplaceTokens, tokens: BuildUtils.mapToHashtable(project.properties))
    }
    // copy fs-cli.sh with execution rights & lf
    from("${project.projectDir}/archive/bin/fs-cli.sh") {
        into("fs-cli/bin")
        fileMode 0755
        filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.newInstance("lf"))
    }
    // copy fs-cli.cmd with execution rights & crlf
    from("${project.projectDir}/archive/bin/fs-cli.cmd") {
        into("fs-cli/bin")
        fileMode 0755
        filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    // copy fat jar
    into("fs-cli/lib") {
        from(shadowJar.getArchiveFile())
    }
    // include json schemas
    into("fs-cli/docs/json-schema") {
        from(getJsonSchemas(project));
    }
    // include documentation
    from("fsdevtools-docs/dist/") {
        into("fs-cli/docs")
    }
}

///////////////////////////////////////////////////////
// assembles the zip file
///////////////////////////////////////////////////////

task assembleZip(type: Zip) {
    dependsOn(shadowJar, "fsdevtools-docs:buildVueApp")

    group('build')

    archiveBaseName = "fs-cli"
    archiveVersion = project.version
    destinationDirectory.set(file("$buildDir/distributions"))

    // copy README.txt
    from("${project.projectDir}/archive/README.txt") {
        into("fs-cli")
        filter(ReplaceTokens, tokens: BuildUtils.mapToHashtable(project.properties))
    }
    // copy conf-dir with filtering
    from("${project.projectDir}/archive/conf") {
        into("fs-cli/conf")
        filter(ReplaceTokens, tokens: BuildUtils.mapToHashtable(project.properties))
    }
    // copy fs-cli.sh with execution rights & lf
    from("${project.projectDir}/archive/bin/fs-cli.sh") {
        into("fs-cli/bin")
        fileMode 0755
        filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.newInstance("lf"))
    }
    // copy fs-cli.cmd with execution rights & crlf
    from("${project.projectDir}/archive/bin/fs-cli.cmd") {
        into("fs-cli/bin")
        fileMode 0755
        filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    // copy fat jar
    into("fs-cli/lib") {
        from(shadowJar.getArchiveFile())
    }
    // include json schemas
    into("fs-cli/docs/json-schema") {
        from(getJsonSchemas(project));
    }
    // include documentation
    from("fsdevtools-docs/dist/") {
        into("fs-cli/docs")
    }
}

///////////////////////////////////////////////////////
// assembles the zip & tar.gz file
///////////////////////////////////////////////////////

assemble.dependsOn(assembleTarGz, assembleZip)

/**
 *  GITHUB RELEASE MANAGEMENT
 */

///////////////////////////////////////////////////////
// setup the githubRelease plugin
///////////////////////////////////////////////////////

if (project.hasProperty('github_fsdevtools_api_token')) {
    githubRelease {
        token github_fsdevtools_api_token
        owner "e-Spirit"
        tagName "${project.version}"
        repo "FSDevTools"
        body "The zip and the tar.gz files are our windows and linux/mac distributions. This binary release does not contain FirstSpirit api jars (fs-isolated-runtime.jar). Please add either of them to lib directory. For further information about the prerequisites, please take a look at the [README](https://github.com/e-Spirit/FSDevTools/blob/master/README.md#prerequisites). The fsdevtools-cli-x.x.xxx.jar file can be used to compile against (Keep in mind that you should rather clone this repo and install all submodules to your local Maven repo)."
        releaseName "Release " + project.version
        releaseAssets assembleTarGz.outputs.files, assembleZip.outputs.files
    }
}

// release is only allowed for master branch & no snapshots
if (!BuildUtils.isSnapshotVersion(version)) {
    def githubTask = tasks.findByName("githubRelease")
    githubTask.dependsOn(assemble)
    tasks.findByName("publish").dependsOn(githubTask)
} else {
    // disable githubRelease for non-master-branches/non-snapshots
    def githubTask = tasks.findByName("githubRelease")
    githubTask.enabled = false
    githubTask.finalizedBy {
        // github release is not allowed for snapshots
        logger.error("GitHub Release is only allowed on master branch!")
    }
}


/**
 * PUBLISHING
 */

publishing {
    publications {
        distributeArchives(MavenPublication) {
            artifact assembleZip
            artifact assembleTarGz
        }
    }
}

/**
 * RELEASE MANAGEMENT
 */

///////////////////////////////////////////////////////
// setup the release plugin
///////////////////////////////////////////////////////

release {
    ignoredSnapshotDependencies = ['de.espirit.firstspirit:fs-license']
}

// publish artifacts after release
allprojects { final p ->
    afterEvaluate {
        rootProject.afterReleaseBuild.dependsOn p.tasks.matching { it.name == 'publish' }
    }
}
